{"version":3,"sources":["App.js","lawsuit-search/related-parts-info/RelatedPartsInfo.js","lawsuit-search/lawsuit-info/LawsuitInfo.js","lawsuit-search/LawsuitSearch.js","serviceWorker.js","index.js"],"names":["Header","Layout","Content","Footer","App","className","style","height","this","props","children","textAlign","Component","LawsuitInfo","loading","active","paragraph","rows","lawsuit","map","index","lsHeader","lsheader","i","key","lsnumber","lsresume","span","lsTimeline","lstimeline","lsdate","lsact","j","Search","Input","LawsuitSearch","state","lawsuitNumber","notFound","setState","axios","get","then","response","history","push","data","console","log","catch","message","error","params","qs","parse","location","search","ignoreQueryPrefix","crawlerLawsuit","event","target","value","placeholder","enterButton","size","onChange","handleChange","bind","onSearch","Boolean","window","hostname","match","ReactDOM","render","path","component","ProcessSearch","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.03046adf.chunk.js","sourcesContent":["import 'antd/dist/antd.css';\nimport React, { Component } from 'react';\nimport './App.scss';\nimport { Layout } from 'antd';\nconst { Header, Content, Footer } = Layout\n/* // /client/src/App.js\n\nimport React, { useState, useEffect } from \"react\";\n\n// SERVICES\nimport lawsuitService from './services/lawsuitService';\n\nfunction App() {\n  const [lawsuits, setlawsuits] = useState(null);\n\n  useEffect(() => {\n    if(!lawsuits) {\n      getLawsuits();\n    }\n  })\n\n  const getLawsuits = async () => {\n    let res = await lawsuitService.getAll();\n    console.log(res);\n    setlawsuits(res);\n  }\n\n  const renderLawsuit = lawsuit => {\n    return (\n      <li key={lawsuit._id} className=\"list__item lawsuit\">\n        <h3 className=\"lawsuit__name\">{lawsuit.name}</h3>\n        <p className=\"lawsuit__description\">{lawsuit.description}</p>\n      </li>\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <ul className=\"list\">\n        {(lawsuits && lawsuits.length > 0) ? (\n          lawsuits.map(lawsuit => renderLawsuit(lawsuit))\n        ) : (\n          <p>No lawsuits found</p>\n        )}\n      </ul>\n    </div>\n  );\n}\n\nexport default App; */\n\n\n\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\" style={{ height: '100%' }}>\n                <Layout className=\"layout\">\n                    <Header>\n                        <h3 className=\"logo\">SigJur - Movimentação de Processos</h3>\n                    </Header>\n                    <Content>\n                        {this.props.children}\n                    </Content>\n                    <Footer style={{ textAlign: 'end' }}>WeNow - Soluções em T.I.</Footer>\n                </Layout>\n            </div>\n        )\n    }\n}\n\nexport default App;","import React, { Component } from 'react';\nimport './RelatedPartsInfo.scss';\n\nclass RelatedPartsInfo extends Component {\n    render() {\n        if (!this.props.parts) {\n            return null\n        }\n        else if (this.props.parts) {\n            return (\n                <div className=\"RelatedPartsInfo\">\n                    <h3 className=\"lawsuit-subtitle\">Partes relacionadas</h3>\n                    {this.props.parts.map(\n                        (part) => (\n                            <div key={part.id}>\n                                <span>{part.kind}</span>\n                                <h3>{part.description}</h3>\n                                <div>\n                                    {part.related_people.map(\n                                        (people) => (\n                                            <div key={people.id}>\n                                                <span>{people.kind}</span>\n                                                <h3>{people.name}</h3>\n                                            </div>\n                                        )\n                                    )}\n                                </div>\n                            </div>\n                        )\n                    )}\n                </div>\n            )\n        } else {\n            return null;\n        }\n    }\n}\n\nexport default RelatedPartsInfo","\nimport { Skeleton, Divider } from 'antd';\nimport React, { Component } from 'react';\nimport RelatedPartsInfo from '../related-parts-info/RelatedPartsInfo';\nimport './LawsuitInfo.scss';\nimport { Row, Col } from 'antd';\n\nclass LawsuitInfo extends Component {\n    render() {\n        if (this.props.loading) {\n            return (\n                <Skeleton className=\"LawsuitInfo\" active paragraph={{ rows: 20 }}/>\n            )\n        } else if (!this.props.lawsuit) {\n            return null\n        } else  {\n            return (\n                \n                <div className=\"LawsuitInfo\">\n                    \n                    {this.props.lawsuit.map((lawsuit, index)=>{\n                    return lawsuit.lsHeader.map((lsheader,i)=> \n                    <div>\n                    <h1 key={index}>{lsheader.lsnumber}</h1>\n                    <span key={i}>{lsheader.lsresume}</span>\n                    \n                    </div>\n                    )               \n                    })}\n                    <row></row>\n                    <Row>\n                        <Col span={17}>\n                            {this.props.lawsuit.map((lawsuit, index)=>{\n                                    return lawsuit.lsTimeline.map((lstimeline,i)=>\n                                        <div key={index} className=\"column\"><br /><row>\n                                            <h4 key={i}>{lstimeline.lsdate}</h4>\n                                            {lstimeline.lsact.map((lsact,j) => {\n                                                return(\n                                                    <div>\n                                                    <p key={j}>{lsact}</p>\n                                                    </div>\n                                                    )\n                                                })}\n                                                </row>\n                                        </div>\n                                        )               \n                                    })}\n                        </Col>\n                        <Col span={1}></Col>\n                        <Col span={6}>\n                         {/*}   <h3 className=\"lawsuit-subtitle\">Detalhes do lawsuito</h3>\n\n                            <div className=\"lawsuit-detail\">\n                                <p>Classe: {this.props.lawsuit.kind}</p>\n                                <p>Área: {this.props.lawsuit.area}</p>\n                                <p>Assunto: {this.props.lawsuit.subject}</p>\n                                <p>Juíz: {this.props.lawsuit.judge}</p>\n                                <p>Valor da ação: R${this.props.lawsuit.action_value}</p>\n                            </div>\n                            <Divider />\n                                <RelatedPartsInfo parts={this.props.lawsuit.related_parts} />*/}\n                        </Col>\n                    </Row>\n                </div>\n            )\n        }\n    }\n}\n\nexport default LawsuitInfo","import { Input, message } from 'antd';\nimport React, { Component } from 'react';\nimport './LawsuitSearch.scss';\nimport axios from 'axios'\nimport LawsuitInfo from './lawsuit-info/LawsuitInfo'\nimport qs from 'qs';\n\nconst { Search } = Input;\n\nclass LawsuitSearch extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            lawsuitNumber: null,\n            lawsuit: null,\n            loading: false,\n            notFound: false,\n        }\n    }\n\n    crawlerLawsuit(lawsuitNumber) {\n        if(lawsuitNumber){\n            this.setState({ loading: true });\n            axios.get(`api/lawsuit/?lawsuitNumber=${lawsuitNumber}`)\n                .then(response => {\n                    this.props.history.push(`?lawsuitNumber=${lawsuitNumber}`);\n                    this.setState({ lawsuit: response.data, loading: false });\n                    console.log(this.state.lawsuit.props);\n                })\n                .catch(response => {\n                    this.props.history.push('');\n                    this.setState({ lawsuit: null, loading: false });\n                    message.error('Nenhum processo encontrado com este número');\n                })\n        } else {\n            message.error('Insira o número do processo');\n        }\n    }\n\n    componentDidMount() {\n        let params = qs.parse(this.props.history.location.search, { ignoreQueryPrefix: true });\n        if (params.lawsuitNumber) {\n            this.setState({ lawsuitNumber: params.lawsuitNumber });\n            this.crawlerLawsuit(params.lawsuitNumber);\n        }\n    }\n\n    handleChange(event) {\n        this.setState({ lawsuitNumber: event.target.value });\n    }\n\n    render() {\n        return (\n            <div className=\"LawsuitSearch\">\n                <span className=\"title\">Busca de processos</span>\n                <div className=\"content\">\n                    <h1>Buscar processo</h1>\n                    <Search\n                        placeholder=\"Insira o número do processo\"\n                        enterButton=\"Buscar\"\n                        size=\"large\"\n                        value={this.state.lawsuitNumber}\n                        onChange={this.handleChange.bind(this)}\n                        onSearch={value => this.crawlerLawsuit(value)}\n                    />\n                </div>\n                <LawsuitInfo lawsuit={this.state.lawsuit} loading={this.state.loading}/>\n            </div>\n\n        )\n    }\n}\n\nexport default LawsuitSearch","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister(); */\n\nimport ReactDOM from 'react-dom';\nimport React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Admin from './App';\nimport './index.css';\nimport ProcessSearch from './lawsuit-search/LawsuitSearch';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n    (<BrowserRouter>\n        <Switch>\n            <Route path=\"\">\n                <Admin>\n                    <Route path=\"\" component={ProcessSearch}/>\n                </Admin>\n            </Route>\n        </Switch>\n    </BrowserRouter>)\n, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}